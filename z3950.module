<?php
/* $Id$ */

/**
 * @file
 * Lets users search metadata in z39.50 compliant servers.
 */

/**
 * YAZ configuration defaults
 * See http://www.loc.gov/marc/bibliographic/ecbdhome.html
 * See http://www.loc.gov/z3950/lcserver.html
 */
define('YAZ_DEFAULT_SYNTAX', '1.2.840.10003.5.10');
define('YAZ_DEFAULT_SERVER', 'z3950.loc.gov:7090/Voyager'); // jenson.stanford.edu:2210/unicorn

/**
 *  Implementation of hook_menu()
 */
function z3950_menu($may_cache = true) {
  $items = array();
  $items['z3950'] = array(
    'access' => 'search in z3950 servers',
    'page callback' => 'z3950_get'
  );
  $items['admin/settings/z3950'] = array(
    'title' => 'z3950',
    'description' => 'Set z3950 configuration options',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('z3950_admin_settings'),
    'access arguments' => array('administer site configuration'),
  );
  return $items;
}

/**
 * Implementation of hook_perm().
 */
function z3950_perm() {
  return array('search in z3950 servers');
}

/**
 * Implementation of hook_settings().
 */
function z3950_admin_settings() {
  if (!_z3950_install_check()) {
    return;
  }

  $form = array();
  $form['z3950_zurls'] = array(
    '#type' => 'textarea',
    '#title' => t('z39.50 zURLS'),
    '#default_value' => variable_get('z3950_zurls', YAZ_DEFAULT_SERVER),
    '#description' => t('Valid zURLs to perform searches of metadata. Add one zURL per row.  zURL is a string that takes the form host[:port][/database]. If port is omitted, port 210 is used. If database is omitted Default is used.'),
  );
  $form['z3950_syntax'] = array(
    '#type' => 'select',
    '#title' => t('Record Syntax'),
    '#default_value' => variable_get('z3950_syntax', YAZ_DEFAULT_SYNTAX),
    '#options' => _z3950_syntax_options(),
    '#description' => t('Specifies the preferred record syntax for retrieval (<a href="@url">see also</a>)', array('@url' => 'http://www.loc.gov/z3950/agency/defns/oids.html#5')),
  );
  return system_settings_form($form);
}

/**
 * Check to make sure that the yaz functions are installed in php,
 * and if not, display an error
 */
function _z3950_install_check() {
  if (!function_exists('yaz_connect')) {
    drupal_set_message(t('You must compile Php with <a href="@yazurl">YAZ</a> and enable the YAZ extension in <a href="@phpurl">php.ini</a> file.', array('@yazurl' => 'http://www.php.net/ref.yaz', '@phpurl' => 'http://www.php.net/configuration#configuration.file')), 'error');
    return FALSE;
  }
  return TRUE;
}

/**
 * Return list of the z39.50 syntax options
 * See http://www.loc.gov/z3950/agency/defns/oids.html
 */
function _z3950_syntax_options() {
  $options = array('' => t('-- Select One --'));
  foreach (_z3950_load_syntax_files() as $info) {
    $options += $info['options'];
  }
  return $options;
}

function _z3950_get_syntax($id, $pos) {
  $syntax = yaz_record($id, $pos, 'syntax');
  $modules = _z3950_load_syntax_files();
  if (isset($modules[$syntax])) {
    return $modules[$syntax];
  }
  else {
    $msg = t('z39.50 search invalid %syntax.', array('%syntax' => $syntax));
    watchdog('search', $msg, WATCHDOG_WARNING);
    drupal_set_message($msg);
  }
}

function _z3950_load_syntax_files() {
  static $syntax_info;
  if (!isset($syntax_info)) {
    $syntax_info = array();
    $path = drupal_get_path('module', 'z3950') .'/syntax';
    $files = drupal_system_listing('z3950_.*\.inc$', $path, 'name', 0);
    foreach ($files as $file) {
      require_once('./'. $file->filename);
      $function = $file->name;
      if (function_exists($function)) {
        $info = call_user_func($function, 'info');
        $info['function'] = $function;
        $syntax_info[$info['value']] = $info;
      }
    }
  }
  return $syntax_info;
}

/**
 * Implementation of hook_search().
 */
function z3950_search($op = 'search', $keys = null) {
  if (function_exists('yaz_connect') && user_access('search in z3950 servers')) {
    switch ($op) {
      case 'name':
        return t('Metadata');
      case 'search':
        return _z3950_search($keys);
    }
  }
}

/**
 * internal implementation of hook_search op=$search
 */
function _z3950_search($keys) {
  // get list of available servers
  if ($servers = _z3950_get_servers()) {
    // parse the search keys into it's form elements,
    if (preg_match('/(.*)server:(.*)/', $keys, $match)) {
      // replace the keys (which was keys and server) with just the keys
      $keys = $match[1];

      // remove unused servers from the list of available servers
      $valid_servers = drupal_map_assoc(explode(',', $match[2]));
      foreach ($servers as $server_index => $server) {
        if (!isset($valid_servers[$server_index])) {
          unset($servers[$server_index]);
        }
      }
    }

    // define the CCL fields the is used by yaz_ccl_conf
    $fields = array(
      'ti' => '1=4', // title
      'au'  => '1=1', // author
    );

    // replace the Drupal keys types with the equivalent CCL command
    $keys = preg_replace('/(au|author):/', 'au=', $keys);
    $keys = preg_replace('/(ti|title):/', 'ti=', $keys);

    // setup the YAZ search on each server
    $ids = array();
    foreach ($servers as $server_index => $server) {
      // connect to the yaz server
      $id = $ids[$server_index] = yaz_connect($server);

      // tell the yaz server the preferred syntax
      yaz_syntax($id, variable_get('z3950_syntax', YAZ_DEFAULT_SYNTAX));

      // parse the query and setup the search
      yaz_ccl_conf($id, $fields);
      if (yaz_ccl_parse($id, $keys, $cclresult)) {
        if (!yaz_search($id, 'rpn', $cclresult['rpn'])) {
          unset($ids[$server_index]);
        }
      }
      else {
        // display the error message, with server name (if more than one server)
        $error = $cclresult['errorstring'];
        if (count($servers) > 1) {
          $error .= '('. $servers[$server_index] .')';
        }
        drupal_set_message($error, 'error');

        // on failure, remove this server from the waiting list
        unset($ids[$server_index]);
      }
    }

    // if there are any available servers that didn't fail, wait for, then process results
    if (count($ids)) {
      // wait for all YAZ servers to respond, then process results
      $options = array('timeout' => 30);
      if (yaz_wait($options)) {
        // count the number of results
        $server_hits = array();
        $server_parts = array();
        $server_pos = array();
        $total_hits = 0;
        foreach ($ids as $server_index => $id) {
          // check for error and get number of 'hits' (results) from this server
          $error = yaz_error($id);
          if (empty($error)) {
            $hits = yaz_hits($id);

            // if this server has any results
            if (!empty($hits)) {
              // keep track of total number of hits, for use in the pager
              $server_hits[$server_index] = $hits;
              $total_hits += $hits;

              // set the starting position
              $server_pos[$server_index] = 1;

              // parse this server:port/database into it's three parts
              preg_match('/^([^\/|^:]+):*([0-9]*)\/*(.*)/i', $servers[$server_index], $zurl_parts);
              $server_part = $zurl_parts[1];
              if ($server_part == 'localhost' or $server_part == '127.0.0.1') {
                $server_part = $_SERVER['SERVER_NAME'];
              }
              $server_parts[$server_index] = $server_part;
            }
          }
          else {
            // display the error message, with server name (if more than one server)
            if (count($servers) > 1) {
              $error .= ' ('. $servers[$server_index] .')';
            }
            drupal_set_message($error, 'error');
          }
        }

        if ($total_hits > 0) {
          // initialize pager variables
          $total_pos = pager_init(10, 0, $total_hits);
          $total_per_server = $total_pos / count($ids);

          // display total matches when there are more than fit on one page
          if ($total_hits > 10) {
            drupal_set_message(t('%hits matches found', array('%hits' => $total_hits)));
          }

          // initialize the current position in each server
          // @TODO: there's a faster way to do this, this is just the easy way!
          // @TODO: test this around the edge cases, is it losing any results?
          while ($total_pos > 0) {
            foreach ($ids as $server_index => $id) {
              if ($server_pos[$server_index] < $server_hits[$server_index]) {
                $server_pos[$server_index] ++;
                $total_pos --;
              }
            }
          }

          // process results from search server, evenly mixing results from each server
          $limit = min($total_hits, 10);
          $find = array();
          while (count($find) < $limit && count($server_hits) > 0) {
            foreach ($ids as $server_index => $id) {
              // loop through the results from this server
              if (!empty($server_hits[$server_index])) {
                // store the position in a scalar variable to make code easier to read
                $pos = $server_pos[$server_index] ++;

                // when all records from this server are retrieved, remove it from the array
                if ($pos >= $server_hits[$server_index]) {
                  unset($server_hits[$server_index]);
                }

                // store the database name for use in the source string below
                $rec_database = yaz_record($id, $pos, 'database');

                // process the result based on the z39.50 syntax
                if ($syntax = _z3950_get_syntax($id, $pos)) {
                  // get the syntax summary for this record
                  $summary = call_user_func($syntax['function'], 'summary', $id, $pos);

                  // add the link to the summary
                  $summary['link'] = url('z3950/'. $server_index .'/'. $pos .'/'. $keys);

                  // add the syntax and source to the summary
                  if (!isset($summary['extra'])) {
                    $summary['extra'] = array();
                  }
                  $summary['extra']['syntax'] = t('syntax: %syntax', array('%syntax' => $syntax['value']));
                  $summary['extra']['source'] = t('source: <a href="@url">@url</a> (%database)', array('@url' => 'http://'. $server_parts[$server_index], '%database' => $rec_database));

                  // save this summary, and don't process it again
                  $find[] = $summary;
                }
              }
            }
          }
          return $find;
        }
      }
    }
  }
}

/**
 * Implementation of hook_form_alter().
 */
function z3950_form_alter(&$form, $form_state, $form_id) {
  // alter the z39.50 search form
  if ($form_id == 'search_form' && arg(1) == 'z3950') {
    // get list of available servers
    $options = _z3950_get_servers();
    $default_values = array_keys($options);

    // if search keys have already been used, parse them into form elements
    $keys = isset($form_state['post']['keys']) ? $form_state['post']['keys'] : $form['basic']['inline']['keys']['#default_value'];
    if (isset($keys) && preg_match('/(.*)server:(.*)/', $keys, $match)) {
      // replace the keys (which was keys and server) with just the keys
      $form['basic']['inline']['keys']['#default_value'] = $match[1];

      // remove unused servers from the list of available servers
      $valid_servers = drupal_map_assoc(explode(',', $match[2]));
      foreach ($default_values as $server_index => $server) {
        if (!isset($valid_servers[$server_index])) {
          unset($default_values[$server_index]);
        }
      }
    }

    // add checkboxes for available servers to the basic form
    if (count($options) > 1) {
      $form['basic']['server'] = array(
        '#type' => 'checkboxes',
        '#options' => $options,
        '#default_value' => $default_values,
      );
    }

    // add help text to the basic form
    $form['basic']['#description'] = t('enter the z39.50 search query.  You may use the CCL qualifiers au (or author) and ti (or title).  For example, <i>author:buber, martin</i> or <i>au:buber and ti:thou</i> are valid searches (<A HREF="@url">see also</A>).', array('@url' => 'http://www.indexdata.dk/yaz/doc/tools.tkl#CCL'));

    // add advanced form
    // @TODO

    // add validate hook to process these new form elements
    $form['#validate'][] = 'z3950_search_validate';
  }
}

/**
 * Form API callback for the search form. Registered in node_form_alter().
 *
 * hook_form_validate() is used solely to set the 'processed_keys' form
 * value for the basic search form.
 */
function z3950_search_validate($form, &$form_state) {
  if (isset($form_state['values']['server'])) {
    $keys  = $form_state['values']['processed_keys'];
    $keys .= ' server:'. implode(',', $form_state['values']['server']);
    form_set_value($form['basic']['inline']['processed_keys'], $keys, $form_state);
  }
}

/**
 * Return the Page results for one search item
 * This page is linked from each record in the search results
 */
function z3950_get() {
  // The URL from the search results is made from the server-index/position/keys
  $server_index = arg(1);
  $pos = arg(2);
  $keys = arg(3);

  $servers = _z3950_get_servers();
  if ($servers && is_numeric($server_index) && is_numeric($pos)) {
    // connect to the yaz server
    $id = yaz_connect($servers[$server_index]);

    // tell the yaz server the preferred syntax
    yaz_syntax($id, variable_get('z3950_syntax', YAZ_DEFAULT_SYNTAX));

    // setup the search
    if (yaz_search($id, 'rpn', $keys)) {
      // wait for YAZ server to respond, then display page results
      $options = array('timeout' => 30);
      if (yaz_wait($options)) {
        // check for errors, then display page results
        $error = yaz_error($id);
        if (empty($error)) {
          // display the page results based on the z39.50 syntax
          if ($syntax = _z3950_get_syntax($id, $pos)) {
            if ($record = call_user_func($syntax['function'], 'detail', $id, $pos)) {
              return theme('yaz_record', $record);
            }
          }
        }
        else {
          drupal_set_message(t('z39.50 search error: %error in server %server', array('%error' => $error, '%server' => $servers[$server_index])));
        }
      }
    }
  }

  // if we get here, there was some error, so go back to the search page
  drupal_goto('search/z3950/'. $keys);
}

function _z3950_get_servers() {
  if ($servers = variable_get('z3950_zurls', YAZ_DEFAULT_SERVER)) {
    // split the servers into an array, and trim leading and trailing white space
    return preg_replace('/^\s+|\s+$/', '', split("/\r\n|\n|\r/", $servers));
  }
  drupal_set_message(t('No servers defined in the <a href="@url">settings</a>', array('@url' => url('admin/settings/z3950'))), 'error');
}

/**
 * Implementation of hook_theme().
 */
function z3950_theme() {
  return array('yaz_record' => array());
}

/**
 * Theme function to display one record in the search results
 */
function theme_yaz_record($result) {
  $output .= '<div><pre>';
  $output .= empty($result) ? t('No records found.') : $result;
  $output .= '</pre></div>';
  return $output;
}

/**
 * Initialize the global pager variables without using the pager_query
 * This should be in pager.inc, but isn't
 */
function pager_init($limit = 10, $element = 0, $count) {
  global $pager_page_array, $pager_total, $pager_total_items;
  $page = isset($_GET['page']) ? $_GET['page'] : '';

  // Convert comma-separated $page to an array, used by other functions.
  $pager_page_array = explode(',', $page);

  // calculate the total of pages as ceil(items / limit).
  $pager_total_items[$element] = $count;
  $pager_total[$element] = ceil($pager_total_items[$element] / $limit);
  $pager_page_array[$element] = max(0, min((int)$pager_page_array[$element], ((int)$pager_total[$element]) - 1));

  // return the current position
  return $pager_page_array[$element] * $limit;
}
